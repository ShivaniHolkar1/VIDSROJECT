# UI Pipeline
parameters:
  - name: ENVVG
    displayName: Select Environment To Deploy
    type: string
    default: UAT
    values:
    - UAT
    #- PROD

  - name: blackduck
    displayName: Do you want to scan for BlackDuck?(Click on it)
    type: boolean
    default: false

trigger:
- master

# DEFINE VARIABLES
variables:
- name: build_agent_pool
  value: windows-latest

- name: build_content_path
  value: "$(Build.SourcesDirectory)/build"
  
- name: env
  ${{ if eq(parameters.ENVVG, 'UAT') }}:
    value: uat
  ${{ if eq(parameters.ENVVG, 'PROD') }}:
    value: prod

- name: BACKEND_URL
  value: $(${{ parameters.ENVVG }}_BACKEND_URL)

# - name: SOLR_URL
#   value: $(${{ parmeters.ENVVG}}_SOLR_URL)

- group: dams_platform


stages:
- ${{ if eq(parameters.blackduck, false) }}:
  - stage: BUILD
    displayName: 'Build ${{ parameters.ENVVG }}'
    pool: 
      vmImage: $(build_agent_pool)
    jobs:
      - job: Build
        displayName: "Build UI"
        workspace:
          clean: all
        steps:
          - checkout: self

          # Replace Variables & Tokens
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace Tokens in Manifests'
            inputs:
              rootDirectory: '$(Build.SourcesDirectory)'
              targetFiles: '**.env'
              escapeType: none
              verbosity: detailed

          - task: NodeTool@0
            inputs:
              versionSpec: '16.x'
            displayName: 'Install Node.js'

          - script: npm install
            displayName: 'npm install'

          - script: npm run build
            displayName: 'npm build'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: $(build_content_path)
              artifactName: build_ui_$(env)
            displayName: "Publish pipeline artifact"

- ${{ if eq(parameters.blackduck, true) }}:
  - stage: BlackDuck
    displayName: 'BlackDuck ${{ parameters.ENVVG }}'
    pool: 
      vmImage: $(build_agent_pool)
    jobs:
      - job: BlackDuck
        displayName: "BlackDuck Scan"
        workspace:
          clean: all
        steps:
          - checkout: self

          - task: synopsys-detect.synopsys-detect.synopsys-detect-task.SynopsysDetectTask@8
            displayName: 'Black Duck - Synopsys Detect for your build '
            inputs:
              BlackDuckService: 'black_duck'
              DetectArguments: |
                --detect.diagnostic=true
                --detect.project.name="IN-CCRA2-Platform"
                --detect.project.version.name="$(bd_version)"
                --detect.project.codelocation.suffix="UI"
                --detect.output.path="C:\Users\VssAdministrator\blackduck"
            #condition: and(succeeded(), eq(variables.bd_run, true))
            #continueOnError: true
